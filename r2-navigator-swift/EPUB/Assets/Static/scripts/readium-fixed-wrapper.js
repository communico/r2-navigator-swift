(()=>{"use strict";var __webpack_modules__={89:(__unused_webpack_module,exports)=>{eval('var __webpack_unused_export__;\n\n/**\n * Implementation of Myers\' online approximate string matching algorithm [1],\n * with additional optimizations suggested by [2].\n *\n * This has O((k/w) * n) complexity where `n` is the length of the text, `k` is\n * the maximum number of errors allowed (always <= the pattern length) and `w`\n * is the word size. Because JS only supports bitwise operations on 32 bit\n * integers, `w` is 32.\n *\n * As far as I am aware, there aren\'t any online algorithms which are\n * significantly better for a wide range of input parameters. The problem can be\n * solved faster using "filter then verify" approaches which first filter out\n * regions of the text that cannot match using a "cheap" check and then verify\n * the remaining potential matches. The verify step requires an algorithm such\n * as this one however.\n *\n * The algorithm\'s approach is essentially to optimize the classic dynamic\n * programming solution to the problem by computing columns of the matrix in\n * word-sized chunks (ie. dealing with 32 chars of the pattern at a time) and\n * avoiding calculating regions of the matrix where the minimum error count is\n * guaranteed to exceed the input threshold.\n *\n * The paper consists of two parts, the first describes the core algorithm for\n * matching patterns <= the size of a word (implemented by `advanceBlock` here).\n * The second uses the core algorithm as part of a larger block-based algorithm\n * to handle longer patterns.\n *\n * [1] G. Myers, “A Fast Bit-Vector Algorithm for Approximate String Matching\n * Based on Dynamic Programming,” vol. 46, no. 3, pp. 395–415, 1999.\n *\n * [2] Šošić, M. (2014). An simd dynamic programming c/c++ library (Doctoral\n * dissertation, Fakultet Elektrotehnike i računarstva, Sveučilište u Zagrebu).\n */\n__webpack_unused_export__ = ({ value: true });\nfunction reverse(s) {\n    return s\n        .split("")\n        .reverse()\n        .join("");\n}\n/**\n * Given the ends of approximate matches for `pattern` in `text`, find\n * the start of the matches.\n *\n * @param findEndFn - Function for finding the end of matches in\n * text.\n * @return Matches with the `start` property set.\n */\nfunction findMatchStarts(text, pattern, matches) {\n    var patRev = reverse(pattern);\n    return matches.map(function (m) {\n        // Find start of each match by reversing the pattern and matching segment\n        // of text and searching for an approx match with the same number of\n        // errors.\n        var minStart = Math.max(0, m.end - pattern.length - m.errors);\n        var textRev = reverse(text.slice(minStart, m.end));\n        // If there are multiple possible start points, choose the one that\n        // maximizes the length of the match.\n        var start = findMatchEnds(textRev, patRev, m.errors).reduce(function (min, rm) {\n            if (m.end - rm.end < min) {\n                return m.end - rm.end;\n            }\n            return min;\n        }, m.end);\n        return {\n            start: start,\n            end: m.end,\n            errors: m.errors\n        };\n    });\n}\n/**\n * Return 1 if a number is non-zero or zero otherwise, without using\n * conditional operators.\n *\n * This should get inlined into `advanceBlock` below by the JIT.\n *\n * Adapted from https://stackoverflow.com/a/3912218/434243\n */\nfunction oneIfNotZero(n) {\n    return ((n | -n) >> 31) & 1;\n}\n/**\n * Block calculation step of the algorithm.\n *\n * From Fig 8. on p. 408 of [1], additionally optimized to replace conditional\n * checks with bitwise operations as per Section 4.2.3 of [2].\n *\n * @param ctx - The pattern context object\n * @param peq - The `peq` array for the current character (`ctx.peq.get(ch)`)\n * @param b - The block level\n * @param hIn - Horizontal input delta ∈ {1,0,-1}\n * @return Horizontal output delta ∈ {1,0,-1}\n */\nfunction advanceBlock(ctx, peq, b, hIn) {\n    var pV = ctx.P[b];\n    var mV = ctx.M[b];\n    var hInIsNegative = hIn >>> 31; // 1 if hIn < 0 or 0 otherwise.\n    var eq = peq[b] | hInIsNegative;\n    // Step 1: Compute horizontal deltas.\n    var xV = eq | mV;\n    var xH = (((eq & pV) + pV) ^ pV) | eq;\n    var pH = mV | ~(xH | pV);\n    var mH = pV & xH;\n    // Step 2: Update score (value of last row of this block).\n    var hOut = oneIfNotZero(pH & ctx.lastRowMask[b]) -\n        oneIfNotZero(mH & ctx.lastRowMask[b]);\n    // Step 3: Update vertical deltas for use when processing next char.\n    pH <<= 1;\n    mH <<= 1;\n    mH |= hInIsNegative;\n    pH |= oneIfNotZero(hIn) - hInIsNegative; // set pH[0] if hIn > 0\n    pV = mH | ~(xV | pH);\n    mV = pH & xV;\n    ctx.P[b] = pV;\n    ctx.M[b] = mV;\n    return hOut;\n}\n/**\n * Find the ends and error counts for matches of `pattern` in `text`.\n *\n * Only the matches with the lowest error count are reported. Other matches\n * with error counts <= maxErrors are discarded.\n *\n * This is the block-based search algorithm from Fig. 9 on p.410 of [1].\n */\nfunction findMatchEnds(text, pattern, maxErrors) {\n    if (pattern.length === 0) {\n        return [];\n    }\n    // Clamp error count so we can rely on the `maxErrors` and `pattern.length`\n    // rows being in the same block below.\n    maxErrors = Math.min(maxErrors, pattern.length);\n    var matches = [];\n    // Word size.\n    var w = 32;\n    // Index of maximum block level.\n    var bMax = Math.ceil(pattern.length / w) - 1;\n    // Context used across block calculations.\n    var ctx = {\n        P: new Uint32Array(bMax + 1),\n        M: new Uint32Array(bMax + 1),\n        lastRowMask: new Uint32Array(bMax + 1)\n    };\n    ctx.lastRowMask.fill(1 << 31);\n    ctx.lastRowMask[bMax] = 1 << (pattern.length - 1) % w;\n    // Dummy "peq" array for chars in the text which do not occur in the pattern.\n    var emptyPeq = new Uint32Array(bMax + 1);\n    // Map of UTF-16 character code to bit vector indicating positions in the\n    // pattern that equal that character.\n    var peq = new Map();\n    // Version of `peq` that only stores mappings for small characters. This\n    // allows faster lookups when iterating through the text because a simple\n    // array lookup can be done instead of a hash table lookup.\n    var asciiPeq = [];\n    for (var i = 0; i < 256; i++) {\n        asciiPeq.push(emptyPeq);\n    }\n    // Calculate `ctx.peq` - a map of character values to bitmasks indicating\n    // positions of that character within the pattern, where each bit represents\n    // a position in the pattern.\n    for (var c = 0; c < pattern.length; c += 1) {\n        var val = pattern.charCodeAt(c);\n        if (peq.has(val)) {\n            // Duplicate char in pattern.\n            continue;\n        }\n        var charPeq = new Uint32Array(bMax + 1);\n        peq.set(val, charPeq);\n        if (val < asciiPeq.length) {\n            asciiPeq[val] = charPeq;\n        }\n        for (var b = 0; b <= bMax; b += 1) {\n            charPeq[b] = 0;\n            // Set all the bits where the pattern matches the current char (ch).\n            // For indexes beyond the end of the pattern, always set the bit as if the\n            // pattern contained a wildcard char in that position.\n            for (var r = 0; r < w; r += 1) {\n                var idx = b * w + r;\n                if (idx >= pattern.length) {\n                    continue;\n                }\n                var match = pattern.charCodeAt(idx) === val;\n                if (match) {\n                    charPeq[b] |= 1 << r;\n                }\n            }\n        }\n    }\n    // Index of last-active block level in the column.\n    var y = Math.max(0, Math.ceil(maxErrors / w) - 1);\n    // Initialize maximum error count at bottom of each block.\n    var score = new Uint32Array(bMax + 1);\n    for (var b = 0; b <= y; b += 1) {\n        score[b] = (b + 1) * w;\n    }\n    score[bMax] = pattern.length;\n    // Initialize vertical deltas for each block.\n    for (var b = 0; b <= y; b += 1) {\n        ctx.P[b] = ~0;\n        ctx.M[b] = 0;\n    }\n    // Process each char of the text, computing the error count for `w` chars of\n    // the pattern at a time.\n    for (var j = 0; j < text.length; j += 1) {\n        // Lookup the bitmask representing the positions of the current char from\n        // the text within the pattern.\n        var charCode = text.charCodeAt(j);\n        var charPeq = void 0;\n        if (charCode < asciiPeq.length) {\n            // Fast array lookup.\n            charPeq = asciiPeq[charCode];\n        }\n        else {\n            // Slower hash table lookup.\n            charPeq = peq.get(charCode);\n            if (typeof charPeq === "undefined") {\n                charPeq = emptyPeq;\n            }\n        }\n        // Calculate error count for blocks that we definitely have to process for\n        // this column.\n        var carry = 0;\n        for (var b = 0; b <= y; b += 1) {\n            carry = advanceBlock(ctx, charPeq, b, carry);\n            score[b] += carry;\n        }\n        // Check if we also need to compute an additional block, or if we can reduce\n        // the number of blocks processed for the next column.\n        if (score[y] - carry <= maxErrors &&\n            y < bMax &&\n            (charPeq[y + 1] & 1 || carry < 0)) {\n            // Error count for bottom block is under threshold, increase the number of\n            // blocks processed for this column & next by 1.\n            y += 1;\n            ctx.P[y] = ~0;\n            ctx.M[y] = 0;\n            var maxBlockScore = y === bMax ? pattern.length % w : w;\n            score[y] =\n                score[y - 1] +\n                    maxBlockScore -\n                    carry +\n                    advanceBlock(ctx, charPeq, y, carry);\n        }\n        else {\n            // Error count for bottom block exceeds threshold, reduce the number of\n            // blocks processed for the next column.\n            while (y > 0 && score[y] >= maxErrors + w) {\n                y -= 1;\n            }\n        }\n        // If error count is under threshold, report a match.\n        if (y === bMax && score[y] <= maxErrors) {\n            if (score[y] < maxErrors) {\n                // Discard any earlier, worse matches.\n                matches.splice(0, matches.length);\n            }\n            matches.push({\n                start: -1,\n                end: j + 1,\n                errors: score[y]\n            });\n            // Because `search` only reports the matches with the lowest error count,\n            // we can "ratchet down" the max error threshold whenever a match is\n            // encountered and thereby save a small amount of work for the remainder\n            // of the text.\n            maxErrors = score[y];\n        }\n    }\n    return matches;\n}\n/**\n * Search for matches for `pattern` in `text` allowing up to `maxErrors` errors.\n *\n * Returns the start, and end positions and error counts for each lowest-cost\n * match. Only the "best" matches are returned.\n */\nfunction search(text, pattern, maxErrors) {\n    var matches = findMatchEnds(text, pattern, maxErrors);\n    return findMatchStarts(text, pattern, matches);\n}\n__webpack_unused_export__ = search;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWFkaXVtLWpzLy4vbm9kZV9tb2R1bGVzL2FwcHJveC1zdHJpbmctbWF0Y2gvZGlzdC9pbmRleC5qcz83MjMwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QyxDQUFDLGNBQWMsQ0FBQztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDO0FBQzFDLHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixTQUFTO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsb0JBQW9CO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLFdBQVc7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsT0FBTztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsUUFBUTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixRQUFRO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsaUJBQWlCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixRQUFRO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQWUiLCJmaWxlIjoiODkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogSW1wbGVtZW50YXRpb24gb2YgTXllcnMnIG9ubGluZSBhcHByb3hpbWF0ZSBzdHJpbmcgbWF0Y2hpbmcgYWxnb3JpdGhtIFsxXSxcbiAqIHdpdGggYWRkaXRpb25hbCBvcHRpbWl6YXRpb25zIHN1Z2dlc3RlZCBieSBbMl0uXG4gKlxuICogVGhpcyBoYXMgTygoay93KSAqIG4pIGNvbXBsZXhpdHkgd2hlcmUgYG5gIGlzIHRoZSBsZW5ndGggb2YgdGhlIHRleHQsIGBrYCBpc1xuICogdGhlIG1heGltdW0gbnVtYmVyIG9mIGVycm9ycyBhbGxvd2VkIChhbHdheXMgPD0gdGhlIHBhdHRlcm4gbGVuZ3RoKSBhbmQgYHdgXG4gKiBpcyB0aGUgd29yZCBzaXplLiBCZWNhdXNlIEpTIG9ubHkgc3VwcG9ydHMgYml0d2lzZSBvcGVyYXRpb25zIG9uIDMyIGJpdFxuICogaW50ZWdlcnMsIGB3YCBpcyAzMi5cbiAqXG4gKiBBcyBmYXIgYXMgSSBhbSBhd2FyZSwgdGhlcmUgYXJlbid0IGFueSBvbmxpbmUgYWxnb3JpdGhtcyB3aGljaCBhcmVcbiAqIHNpZ25pZmljYW50bHkgYmV0dGVyIGZvciBhIHdpZGUgcmFuZ2Ugb2YgaW5wdXQgcGFyYW1ldGVycy4gVGhlIHByb2JsZW0gY2FuIGJlXG4gKiBzb2x2ZWQgZmFzdGVyIHVzaW5nIFwiZmlsdGVyIHRoZW4gdmVyaWZ5XCIgYXBwcm9hY2hlcyB3aGljaCBmaXJzdCBmaWx0ZXIgb3V0XG4gKiByZWdpb25zIG9mIHRoZSB0ZXh0IHRoYXQgY2Fubm90IG1hdGNoIHVzaW5nIGEgXCJjaGVhcFwiIGNoZWNrIGFuZCB0aGVuIHZlcmlmeVxuICogdGhlIHJlbWFpbmluZyBwb3RlbnRpYWwgbWF0Y2hlcy4gVGhlIHZlcmlmeSBzdGVwIHJlcXVpcmVzIGFuIGFsZ29yaXRobSBzdWNoXG4gKiBhcyB0aGlzIG9uZSBob3dldmVyLlxuICpcbiAqIFRoZSBhbGdvcml0aG0ncyBhcHByb2FjaCBpcyBlc3NlbnRpYWxseSB0byBvcHRpbWl6ZSB0aGUgY2xhc3NpYyBkeW5hbWljXG4gKiBwcm9ncmFtbWluZyBzb2x1dGlvbiB0byB0aGUgcHJvYmxlbSBieSBjb21wdXRpbmcgY29sdW1ucyBvZiB0aGUgbWF0cml4IGluXG4gKiB3b3JkLXNpemVkIGNodW5rcyAoaWUuIGRlYWxpbmcgd2l0aCAzMiBjaGFycyBvZiB0aGUgcGF0dGVybiBhdCBhIHRpbWUpIGFuZFxuICogYXZvaWRpbmcgY2FsY3VsYXRpbmcgcmVnaW9ucyBvZiB0aGUgbWF0cml4IHdoZXJlIHRoZSBtaW5pbXVtIGVycm9yIGNvdW50IGlzXG4gKiBndWFyYW50ZWVkIHRvIGV4Y2VlZCB0aGUgaW5wdXQgdGhyZXNob2xkLlxuICpcbiAqIFRoZSBwYXBlciBjb25zaXN0cyBvZiB0d28gcGFydHMsIHRoZSBmaXJzdCBkZXNjcmliZXMgdGhlIGNvcmUgYWxnb3JpdGhtIGZvclxuICogbWF0Y2hpbmcgcGF0dGVybnMgPD0gdGhlIHNpemUgb2YgYSB3b3JkIChpbXBsZW1lbnRlZCBieSBgYWR2YW5jZUJsb2NrYCBoZXJlKS5cbiAqIFRoZSBzZWNvbmQgdXNlcyB0aGUgY29yZSBhbGdvcml0aG0gYXMgcGFydCBvZiBhIGxhcmdlciBibG9jay1iYXNlZCBhbGdvcml0aG1cbiAqIHRvIGhhbmRsZSBsb25nZXIgcGF0dGVybnMuXG4gKlxuICogWzFdIEcuIE15ZXJzLCDigJxBIEZhc3QgQml0LVZlY3RvciBBbGdvcml0aG0gZm9yIEFwcHJveGltYXRlIFN0cmluZyBNYXRjaGluZ1xuICogQmFzZWQgb24gRHluYW1pYyBQcm9ncmFtbWluZyzigJ0gdm9sLiA0Niwgbm8uIDMsIHBwLiAzOTXigJM0MTUsIDE5OTkuXG4gKlxuICogWzJdIMWgb8WhacSHLCBNLiAoMjAxNCkuIEFuIHNpbWQgZHluYW1pYyBwcm9ncmFtbWluZyBjL2MrKyBsaWJyYXJ5IChEb2N0b3JhbFxuICogZGlzc2VydGF0aW9uLCBGYWt1bHRldCBFbGVrdHJvdGVobmlrZSBpIHJhxI11bmFyc3R2YSwgU3ZldcSNaWxpxaF0ZSB1IFphZ3JlYnUpLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5mdW5jdGlvbiByZXZlcnNlKHMpIHtcbiAgICByZXR1cm4gc1xuICAgICAgICAuc3BsaXQoXCJcIilcbiAgICAgICAgLnJldmVyc2UoKVxuICAgICAgICAuam9pbihcIlwiKTtcbn1cbi8qKlxuICogR2l2ZW4gdGhlIGVuZHMgb2YgYXBwcm94aW1hdGUgbWF0Y2hlcyBmb3IgYHBhdHRlcm5gIGluIGB0ZXh0YCwgZmluZFxuICogdGhlIHN0YXJ0IG9mIHRoZSBtYXRjaGVzLlxuICpcbiAqIEBwYXJhbSBmaW5kRW5kRm4gLSBGdW5jdGlvbiBmb3IgZmluZGluZyB0aGUgZW5kIG9mIG1hdGNoZXMgaW5cbiAqIHRleHQuXG4gKiBAcmV0dXJuIE1hdGNoZXMgd2l0aCB0aGUgYHN0YXJ0YCBwcm9wZXJ0eSBzZXQuXG4gKi9cbmZ1bmN0aW9uIGZpbmRNYXRjaFN0YXJ0cyh0ZXh0LCBwYXR0ZXJuLCBtYXRjaGVzKSB7XG4gICAgdmFyIHBhdFJldiA9IHJldmVyc2UocGF0dGVybik7XG4gICAgcmV0dXJuIG1hdGNoZXMubWFwKGZ1bmN0aW9uIChtKSB7XG4gICAgICAgIC8vIEZpbmQgc3RhcnQgb2YgZWFjaCBtYXRjaCBieSByZXZlcnNpbmcgdGhlIHBhdHRlcm4gYW5kIG1hdGNoaW5nIHNlZ21lbnRcbiAgICAgICAgLy8gb2YgdGV4dCBhbmQgc2VhcmNoaW5nIGZvciBhbiBhcHByb3ggbWF0Y2ggd2l0aCB0aGUgc2FtZSBudW1iZXIgb2ZcbiAgICAgICAgLy8gZXJyb3JzLlxuICAgICAgICB2YXIgbWluU3RhcnQgPSBNYXRoLm1heCgwLCBtLmVuZCAtIHBhdHRlcm4ubGVuZ3RoIC0gbS5lcnJvcnMpO1xuICAgICAgICB2YXIgdGV4dFJldiA9IHJldmVyc2UodGV4dC5zbGljZShtaW5TdGFydCwgbS5lbmQpKTtcbiAgICAgICAgLy8gSWYgdGhlcmUgYXJlIG11bHRpcGxlIHBvc3NpYmxlIHN0YXJ0IHBvaW50cywgY2hvb3NlIHRoZSBvbmUgdGhhdFxuICAgICAgICAvLyBtYXhpbWl6ZXMgdGhlIGxlbmd0aCBvZiB0aGUgbWF0Y2guXG4gICAgICAgIHZhciBzdGFydCA9IGZpbmRNYXRjaEVuZHModGV4dFJldiwgcGF0UmV2LCBtLmVycm9ycykucmVkdWNlKGZ1bmN0aW9uIChtaW4sIHJtKSB7XG4gICAgICAgICAgICBpZiAobS5lbmQgLSBybS5lbmQgPCBtaW4pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbS5lbmQgLSBybS5lbmQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbWluO1xuICAgICAgICB9LCBtLmVuZCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdGFydDogc3RhcnQsXG4gICAgICAgICAgICBlbmQ6IG0uZW5kLFxuICAgICAgICAgICAgZXJyb3JzOiBtLmVycm9yc1xuICAgICAgICB9O1xuICAgIH0pO1xufVxuLyoqXG4gKiBSZXR1cm4gMSBpZiBhIG51bWJlciBpcyBub24temVybyBvciB6ZXJvIG90aGVyd2lzZSwgd2l0aG91dCB1c2luZ1xuICogY29uZGl0aW9uYWwgb3BlcmF0b3JzLlxuICpcbiAqIFRoaXMgc2hvdWxkIGdldCBpbmxpbmVkIGludG8gYGFkdmFuY2VCbG9ja2AgYmVsb3cgYnkgdGhlIEpJVC5cbiAqXG4gKiBBZGFwdGVkIGZyb20gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzM5MTIyMTgvNDM0MjQzXG4gKi9cbmZ1bmN0aW9uIG9uZUlmTm90WmVybyhuKSB7XG4gICAgcmV0dXJuICgobiB8IC1uKSA+PiAzMSkgJiAxO1xufVxuLyoqXG4gKiBCbG9jayBjYWxjdWxhdGlvbiBzdGVwIG9mIHRoZSBhbGdvcml0aG0uXG4gKlxuICogRnJvbSBGaWcgOC4gb24gcC4gNDA4IG9mIFsxXSwgYWRkaXRpb25hbGx5IG9wdGltaXplZCB0byByZXBsYWNlIGNvbmRpdGlvbmFsXG4gKiBjaGVja3Mgd2l0aCBiaXR3aXNlIG9wZXJhdGlvbnMgYXMgcGVyIFNlY3Rpb24gNC4yLjMgb2YgWzJdLlxuICpcbiAqIEBwYXJhbSBjdHggLSBUaGUgcGF0dGVybiBjb250ZXh0IG9iamVjdFxuICogQHBhcmFtIHBlcSAtIFRoZSBgcGVxYCBhcnJheSBmb3IgdGhlIGN1cnJlbnQgY2hhcmFjdGVyIChgY3R4LnBlcS5nZXQoY2gpYClcbiAqIEBwYXJhbSBiIC0gVGhlIGJsb2NrIGxldmVsXG4gKiBAcGFyYW0gaEluIC0gSG9yaXpvbnRhbCBpbnB1dCBkZWx0YSDiiIggezEsMCwtMX1cbiAqIEByZXR1cm4gSG9yaXpvbnRhbCBvdXRwdXQgZGVsdGEg4oiIIHsxLDAsLTF9XG4gKi9cbmZ1bmN0aW9uIGFkdmFuY2VCbG9jayhjdHgsIHBlcSwgYiwgaEluKSB7XG4gICAgdmFyIHBWID0gY3R4LlBbYl07XG4gICAgdmFyIG1WID0gY3R4Lk1bYl07XG4gICAgdmFyIGhJbklzTmVnYXRpdmUgPSBoSW4gPj4+IDMxOyAvLyAxIGlmIGhJbiA8IDAgb3IgMCBvdGhlcndpc2UuXG4gICAgdmFyIGVxID0gcGVxW2JdIHwgaEluSXNOZWdhdGl2ZTtcbiAgICAvLyBTdGVwIDE6IENvbXB1dGUgaG9yaXpvbnRhbCBkZWx0YXMuXG4gICAgdmFyIHhWID0gZXEgfCBtVjtcbiAgICB2YXIgeEggPSAoKChlcSAmIHBWKSArIHBWKSBeIHBWKSB8IGVxO1xuICAgIHZhciBwSCA9IG1WIHwgfih4SCB8IHBWKTtcbiAgICB2YXIgbUggPSBwViAmIHhIO1xuICAgIC8vIFN0ZXAgMjogVXBkYXRlIHNjb3JlICh2YWx1ZSBvZiBsYXN0IHJvdyBvZiB0aGlzIGJsb2NrKS5cbiAgICB2YXIgaE91dCA9IG9uZUlmTm90WmVybyhwSCAmIGN0eC5sYXN0Um93TWFza1tiXSkgLVxuICAgICAgICBvbmVJZk5vdFplcm8obUggJiBjdHgubGFzdFJvd01hc2tbYl0pO1xuICAgIC8vIFN0ZXAgMzogVXBkYXRlIHZlcnRpY2FsIGRlbHRhcyBmb3IgdXNlIHdoZW4gcHJvY2Vzc2luZyBuZXh0IGNoYXIuXG4gICAgcEggPDw9IDE7XG4gICAgbUggPDw9IDE7XG4gICAgbUggfD0gaEluSXNOZWdhdGl2ZTtcbiAgICBwSCB8PSBvbmVJZk5vdFplcm8oaEluKSAtIGhJbklzTmVnYXRpdmU7IC8vIHNldCBwSFswXSBpZiBoSW4gPiAwXG4gICAgcFYgPSBtSCB8IH4oeFYgfCBwSCk7XG4gICAgbVYgPSBwSCAmIHhWO1xuICAgIGN0eC5QW2JdID0gcFY7XG4gICAgY3R4Lk1bYl0gPSBtVjtcbiAgICByZXR1cm4gaE91dDtcbn1cbi8qKlxuICogRmluZCB0aGUgZW5kcyBhbmQgZXJyb3IgY291bnRzIGZvciBtYXRjaGVzIG9mIGBwYXR0ZXJuYCBpbiBgdGV4dGAuXG4gKlxuICogT25seSB0aGUgbWF0Y2hlcyB3aXRoIHRoZSBsb3dlc3QgZXJyb3IgY291bnQgYXJlIHJlcG9ydGVkLiBPdGhlciBtYXRjaGVzXG4gKiB3aXRoIGVycm9yIGNvdW50cyA8PSBtYXhFcnJvcnMgYXJlIGRpc2NhcmRlZC5cbiAqXG4gKiBUaGlzIGlzIHRoZSBibG9jay1iYXNlZCBzZWFyY2ggYWxnb3JpdGhtIGZyb20gRmlnLiA5IG9uIHAuNDEwIG9mIFsxXS5cbiAqL1xuZnVuY3Rpb24gZmluZE1hdGNoRW5kcyh0ZXh0LCBwYXR0ZXJuLCBtYXhFcnJvcnMpIHtcbiAgICBpZiAocGF0dGVybi5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICAvLyBDbGFtcCBlcnJvciBjb3VudCBzbyB3ZSBjYW4gcmVseSBvbiB0aGUgYG1heEVycm9yc2AgYW5kIGBwYXR0ZXJuLmxlbmd0aGBcbiAgICAvLyByb3dzIGJlaW5nIGluIHRoZSBzYW1lIGJsb2NrIGJlbG93LlxuICAgIG1heEVycm9ycyA9IE1hdGgubWluKG1heEVycm9ycywgcGF0dGVybi5sZW5ndGgpO1xuICAgIHZhciBtYXRjaGVzID0gW107XG4gICAgLy8gV29yZCBzaXplLlxuICAgIHZhciB3ID0gMzI7XG4gICAgLy8gSW5kZXggb2YgbWF4aW11bSBibG9jayBsZXZlbC5cbiAgICB2YXIgYk1heCA9IE1hdGguY2VpbChwYXR0ZXJuLmxlbmd0aCAvIHcpIC0gMTtcbiAgICAvLyBDb250ZXh0IHVzZWQgYWNyb3NzIGJsb2NrIGNhbGN1bGF0aW9ucy5cbiAgICB2YXIgY3R4ID0ge1xuICAgICAgICBQOiBuZXcgVWludDMyQXJyYXkoYk1heCArIDEpLFxuICAgICAgICBNOiBuZXcgVWludDMyQXJyYXkoYk1heCArIDEpLFxuICAgICAgICBsYXN0Um93TWFzazogbmV3IFVpbnQzMkFycmF5KGJNYXggKyAxKVxuICAgIH07XG4gICAgY3R4Lmxhc3RSb3dNYXNrLmZpbGwoMSA8PCAzMSk7XG4gICAgY3R4Lmxhc3RSb3dNYXNrW2JNYXhdID0gMSA8PCAocGF0dGVybi5sZW5ndGggLSAxKSAlIHc7XG4gICAgLy8gRHVtbXkgXCJwZXFcIiBhcnJheSBmb3IgY2hhcnMgaW4gdGhlIHRleHQgd2hpY2ggZG8gbm90IG9jY3VyIGluIHRoZSBwYXR0ZXJuLlxuICAgIHZhciBlbXB0eVBlcSA9IG5ldyBVaW50MzJBcnJheShiTWF4ICsgMSk7XG4gICAgLy8gTWFwIG9mIFVURi0xNiBjaGFyYWN0ZXIgY29kZSB0byBiaXQgdmVjdG9yIGluZGljYXRpbmcgcG9zaXRpb25zIGluIHRoZVxuICAgIC8vIHBhdHRlcm4gdGhhdCBlcXVhbCB0aGF0IGNoYXJhY3Rlci5cbiAgICB2YXIgcGVxID0gbmV3IE1hcCgpO1xuICAgIC8vIFZlcnNpb24gb2YgYHBlcWAgdGhhdCBvbmx5IHN0b3JlcyBtYXBwaW5ncyBmb3Igc21hbGwgY2hhcmFjdGVycy4gVGhpc1xuICAgIC8vIGFsbG93cyBmYXN0ZXIgbG9va3VwcyB3aGVuIGl0ZXJhdGluZyB0aHJvdWdoIHRoZSB0ZXh0IGJlY2F1c2UgYSBzaW1wbGVcbiAgICAvLyBhcnJheSBsb29rdXAgY2FuIGJlIGRvbmUgaW5zdGVhZCBvZiBhIGhhc2ggdGFibGUgbG9va3VwLlxuICAgIHZhciBhc2NpaVBlcSA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMjU2OyBpKyspIHtcbiAgICAgICAgYXNjaWlQZXEucHVzaChlbXB0eVBlcSk7XG4gICAgfVxuICAgIC8vIENhbGN1bGF0ZSBgY3R4LnBlcWAgLSBhIG1hcCBvZiBjaGFyYWN0ZXIgdmFsdWVzIHRvIGJpdG1hc2tzIGluZGljYXRpbmdcbiAgICAvLyBwb3NpdGlvbnMgb2YgdGhhdCBjaGFyYWN0ZXIgd2l0aGluIHRoZSBwYXR0ZXJuLCB3aGVyZSBlYWNoIGJpdCByZXByZXNlbnRzXG4gICAgLy8gYSBwb3NpdGlvbiBpbiB0aGUgcGF0dGVybi5cbiAgICBmb3IgKHZhciBjID0gMDsgYyA8IHBhdHRlcm4ubGVuZ3RoOyBjICs9IDEpIHtcbiAgICAgICAgdmFyIHZhbCA9IHBhdHRlcm4uY2hhckNvZGVBdChjKTtcbiAgICAgICAgaWYgKHBlcS5oYXModmFsKSkge1xuICAgICAgICAgICAgLy8gRHVwbGljYXRlIGNoYXIgaW4gcGF0dGVybi5cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjaGFyUGVxID0gbmV3IFVpbnQzMkFycmF5KGJNYXggKyAxKTtcbiAgICAgICAgcGVxLnNldCh2YWwsIGNoYXJQZXEpO1xuICAgICAgICBpZiAodmFsIDwgYXNjaWlQZXEubGVuZ3RoKSB7XG4gICAgICAgICAgICBhc2NpaVBlcVt2YWxdID0gY2hhclBlcTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBiID0gMDsgYiA8PSBiTWF4OyBiICs9IDEpIHtcbiAgICAgICAgICAgIGNoYXJQZXFbYl0gPSAwO1xuICAgICAgICAgICAgLy8gU2V0IGFsbCB0aGUgYml0cyB3aGVyZSB0aGUgcGF0dGVybiBtYXRjaGVzIHRoZSBjdXJyZW50IGNoYXIgKGNoKS5cbiAgICAgICAgICAgIC8vIEZvciBpbmRleGVzIGJleW9uZCB0aGUgZW5kIG9mIHRoZSBwYXR0ZXJuLCBhbHdheXMgc2V0IHRoZSBiaXQgYXMgaWYgdGhlXG4gICAgICAgICAgICAvLyBwYXR0ZXJuIGNvbnRhaW5lZCBhIHdpbGRjYXJkIGNoYXIgaW4gdGhhdCBwb3NpdGlvbi5cbiAgICAgICAgICAgIGZvciAodmFyIHIgPSAwOyByIDwgdzsgciArPSAxKSB7XG4gICAgICAgICAgICAgICAgdmFyIGlkeCA9IGIgKiB3ICsgcjtcbiAgICAgICAgICAgICAgICBpZiAoaWR4ID49IHBhdHRlcm4ubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgbWF0Y2ggPSBwYXR0ZXJuLmNoYXJDb2RlQXQoaWR4KSA9PT0gdmFsO1xuICAgICAgICAgICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICBjaGFyUGVxW2JdIHw9IDEgPDwgcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gSW5kZXggb2YgbGFzdC1hY3RpdmUgYmxvY2sgbGV2ZWwgaW4gdGhlIGNvbHVtbi5cbiAgICB2YXIgeSA9IE1hdGgubWF4KDAsIE1hdGguY2VpbChtYXhFcnJvcnMgLyB3KSAtIDEpO1xuICAgIC8vIEluaXRpYWxpemUgbWF4aW11bSBlcnJvciBjb3VudCBhdCBib3R0b20gb2YgZWFjaCBibG9jay5cbiAgICB2YXIgc2NvcmUgPSBuZXcgVWludDMyQXJyYXkoYk1heCArIDEpO1xuICAgIGZvciAodmFyIGIgPSAwOyBiIDw9IHk7IGIgKz0gMSkge1xuICAgICAgICBzY29yZVtiXSA9IChiICsgMSkgKiB3O1xuICAgIH1cbiAgICBzY29yZVtiTWF4XSA9IHBhdHRlcm4ubGVuZ3RoO1xuICAgIC8vIEluaXRpYWxpemUgdmVydGljYWwgZGVsdGFzIGZvciBlYWNoIGJsb2NrLlxuICAgIGZvciAodmFyIGIgPSAwOyBiIDw9IHk7IGIgKz0gMSkge1xuICAgICAgICBjdHguUFtiXSA9IH4wO1xuICAgICAgICBjdHguTVtiXSA9IDA7XG4gICAgfVxuICAgIC8vIFByb2Nlc3MgZWFjaCBjaGFyIG9mIHRoZSB0ZXh0LCBjb21wdXRpbmcgdGhlIGVycm9yIGNvdW50IGZvciBgd2AgY2hhcnMgb2ZcbiAgICAvLyB0aGUgcGF0dGVybiBhdCBhIHRpbWUuXG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCB0ZXh0Lmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgIC8vIExvb2t1cCB0aGUgYml0bWFzayByZXByZXNlbnRpbmcgdGhlIHBvc2l0aW9ucyBvZiB0aGUgY3VycmVudCBjaGFyIGZyb21cbiAgICAgICAgLy8gdGhlIHRleHQgd2l0aGluIHRoZSBwYXR0ZXJuLlxuICAgICAgICB2YXIgY2hhckNvZGUgPSB0ZXh0LmNoYXJDb2RlQXQoaik7XG4gICAgICAgIHZhciBjaGFyUGVxID0gdm9pZCAwO1xuICAgICAgICBpZiAoY2hhckNvZGUgPCBhc2NpaVBlcS5sZW5ndGgpIHtcbiAgICAgICAgICAgIC8vIEZhc3QgYXJyYXkgbG9va3VwLlxuICAgICAgICAgICAgY2hhclBlcSA9IGFzY2lpUGVxW2NoYXJDb2RlXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIFNsb3dlciBoYXNoIHRhYmxlIGxvb2t1cC5cbiAgICAgICAgICAgIGNoYXJQZXEgPSBwZXEuZ2V0KGNoYXJDb2RlKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY2hhclBlcSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgIGNoYXJQZXEgPSBlbXB0eVBlcTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBDYWxjdWxhdGUgZXJyb3IgY291bnQgZm9yIGJsb2NrcyB0aGF0IHdlIGRlZmluaXRlbHkgaGF2ZSB0byBwcm9jZXNzIGZvclxuICAgICAgICAvLyB0aGlzIGNvbHVtbi5cbiAgICAgICAgdmFyIGNhcnJ5ID0gMDtcbiAgICAgICAgZm9yICh2YXIgYiA9IDA7IGIgPD0geTsgYiArPSAxKSB7XG4gICAgICAgICAgICBjYXJyeSA9IGFkdmFuY2VCbG9jayhjdHgsIGNoYXJQZXEsIGIsIGNhcnJ5KTtcbiAgICAgICAgICAgIHNjb3JlW2JdICs9IGNhcnJ5O1xuICAgICAgICB9XG4gICAgICAgIC8vIENoZWNrIGlmIHdlIGFsc28gbmVlZCB0byBjb21wdXRlIGFuIGFkZGl0aW9uYWwgYmxvY2ssIG9yIGlmIHdlIGNhbiByZWR1Y2VcbiAgICAgICAgLy8gdGhlIG51bWJlciBvZiBibG9ja3MgcHJvY2Vzc2VkIGZvciB0aGUgbmV4dCBjb2x1bW4uXG4gICAgICAgIGlmIChzY29yZVt5XSAtIGNhcnJ5IDw9IG1heEVycm9ycyAmJlxuICAgICAgICAgICAgeSA8IGJNYXggJiZcbiAgICAgICAgICAgIChjaGFyUGVxW3kgKyAxXSAmIDEgfHwgY2FycnkgPCAwKSkge1xuICAgICAgICAgICAgLy8gRXJyb3IgY291bnQgZm9yIGJvdHRvbSBibG9jayBpcyB1bmRlciB0aHJlc2hvbGQsIGluY3JlYXNlIHRoZSBudW1iZXIgb2ZcbiAgICAgICAgICAgIC8vIGJsb2NrcyBwcm9jZXNzZWQgZm9yIHRoaXMgY29sdW1uICYgbmV4dCBieSAxLlxuICAgICAgICAgICAgeSArPSAxO1xuICAgICAgICAgICAgY3R4LlBbeV0gPSB+MDtcbiAgICAgICAgICAgIGN0eC5NW3ldID0gMDtcbiAgICAgICAgICAgIHZhciBtYXhCbG9ja1Njb3JlID0geSA9PT0gYk1heCA/IHBhdHRlcm4ubGVuZ3RoICUgdyA6IHc7XG4gICAgICAgICAgICBzY29yZVt5XSA9XG4gICAgICAgICAgICAgICAgc2NvcmVbeSAtIDFdICtcbiAgICAgICAgICAgICAgICAgICAgbWF4QmxvY2tTY29yZSAtXG4gICAgICAgICAgICAgICAgICAgIGNhcnJ5ICtcbiAgICAgICAgICAgICAgICAgICAgYWR2YW5jZUJsb2NrKGN0eCwgY2hhclBlcSwgeSwgY2FycnkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gRXJyb3IgY291bnQgZm9yIGJvdHRvbSBibG9jayBleGNlZWRzIHRocmVzaG9sZCwgcmVkdWNlIHRoZSBudW1iZXIgb2ZcbiAgICAgICAgICAgIC8vIGJsb2NrcyBwcm9jZXNzZWQgZm9yIHRoZSBuZXh0IGNvbHVtbi5cbiAgICAgICAgICAgIHdoaWxlICh5ID4gMCAmJiBzY29yZVt5XSA+PSBtYXhFcnJvcnMgKyB3KSB7XG4gICAgICAgICAgICAgICAgeSAtPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIElmIGVycm9yIGNvdW50IGlzIHVuZGVyIHRocmVzaG9sZCwgcmVwb3J0IGEgbWF0Y2guXG4gICAgICAgIGlmICh5ID09PSBiTWF4ICYmIHNjb3JlW3ldIDw9IG1heEVycm9ycykge1xuICAgICAgICAgICAgaWYgKHNjb3JlW3ldIDwgbWF4RXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgLy8gRGlzY2FyZCBhbnkgZWFybGllciwgd29yc2UgbWF0Y2hlcy5cbiAgICAgICAgICAgICAgICBtYXRjaGVzLnNwbGljZSgwLCBtYXRjaGVzLmxlbmd0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtYXRjaGVzLnB1c2goe1xuICAgICAgICAgICAgICAgIHN0YXJ0OiAtMSxcbiAgICAgICAgICAgICAgICBlbmQ6IGogKyAxLFxuICAgICAgICAgICAgICAgIGVycm9yczogc2NvcmVbeV1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gQmVjYXVzZSBgc2VhcmNoYCBvbmx5IHJlcG9ydHMgdGhlIG1hdGNoZXMgd2l0aCB0aGUgbG93ZXN0IGVycm9yIGNvdW50LFxuICAgICAgICAgICAgLy8gd2UgY2FuIFwicmF0Y2hldCBkb3duXCIgdGhlIG1heCBlcnJvciB0aHJlc2hvbGQgd2hlbmV2ZXIgYSBtYXRjaCBpc1xuICAgICAgICAgICAgLy8gZW5jb3VudGVyZWQgYW5kIHRoZXJlYnkgc2F2ZSBhIHNtYWxsIGFtb3VudCBvZiB3b3JrIGZvciB0aGUgcmVtYWluZGVyXG4gICAgICAgICAgICAvLyBvZiB0aGUgdGV4dC5cbiAgICAgICAgICAgIG1heEVycm9ycyA9IHNjb3JlW3ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtYXRjaGVzO1xufVxuLyoqXG4gKiBTZWFyY2ggZm9yIG1hdGNoZXMgZm9yIGBwYXR0ZXJuYCBpbiBgdGV4dGAgYWxsb3dpbmcgdXAgdG8gYG1heEVycm9yc2AgZXJyb3JzLlxuICpcbiAqIFJldHVybnMgdGhlIHN0YXJ0LCBhbmQgZW5kIHBvc2l0aW9ucyBhbmQgZXJyb3IgY291bnRzIGZvciBlYWNoIGxvd2VzdC1jb3N0XG4gKiBtYXRjaC4gT25seSB0aGUgXCJiZXN0XCIgbWF0Y2hlcyBhcmUgcmV0dXJuZWQuXG4gKi9cbmZ1bmN0aW9uIHNlYXJjaCh0ZXh0LCBwYXR0ZXJuLCBtYXhFcnJvcnMpIHtcbiAgICB2YXIgbWF0Y2hlcyA9IGZpbmRNYXRjaEVuZHModGV4dCwgcGF0dGVybiwgbWF4RXJyb3JzKTtcbiAgICByZXR1cm4gZmluZE1hdGNoU3RhcnRzKHRleHQsIHBhdHRlcm4sIG1hdGNoZXMpO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gc2VhcmNoO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///89\n')},388:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('\n// EXTERNAL MODULE: ./node_modules/approx-string-match/dist/index.js\nvar dist = __webpack_require__(89);\n;// CONCATENATED MODULE: ./src/vendor/hypothesis/anchoring/match-quote.js\n\n\n/**\n * @typedef {import(\'approx-string-match\').Match} StringMatch\n */\n\n/**\n * @typedef Match\n * @prop {number} start - Start offset of match in text\n * @prop {number} end - End offset of match in text\n * @prop {number} score -\n *   Score for the match between 0 and 1.0, where 1.0 indicates a perfect match\n *   for the quote and context.\n */\n\n/**\n * Find the best approximate matches for `str` in `text` allowing up to `maxErrors` errors.\n *\n * @param {string} text\n * @param {string} str\n * @param {number} maxErrors\n * @return {StringMatch[]}\n */\nfunction search(text, str, maxErrors) {\n  // Do a fast search for exact matches. The `approx-string-match` library\n  // doesn\'t currently incorporate this optimization itself.\n  let matchPos = 0;\n  let exactMatches = [];\n  while (matchPos !== -1) {\n    matchPos = text.indexOf(str, matchPos);\n    if (matchPos !== -1) {\n      exactMatches.push({\n        start: matchPos,\n        end: matchPos + str.length,\n        errors: 0,\n      });\n      matchPos += 1;\n    }\n  }\n  if (exactMatches.length > 0) {\n    return exactMatches;\n  }\n\n  // If there are no exact matches, do a more expensive search for matches\n  // with errors.\n  return approxSearch(text, str, maxErrors);\n}\n\n/**\n * Compute a score between 0 and 1.0 for the similarity between `text` and `str`.\n *\n * @param {string} text\n * @param {string} str\n */\nfunction textMatchScore(text, str) {\n  /* istanbul ignore next - `scoreMatch` will never pass an empty string */\n  if (str.length === 0 || text.length === 0) {\n    return 0.0;\n  }\n  const matches = search(text, str, str.length);\n\n  // prettier-ignore\n  return 1 - (matches[0].errors / str.length);\n}\n\n/**\n * Find the best approximate match for `quote` in `text`.\n *\n * Returns `null` if no match exceeding the minimum quality threshold was found.\n *\n * @param {string} text - Document text to search\n * @param {string} quote - String to find within `text`\n * @param {Object} context -\n *   Context in which the quote originally appeared. This is used to choose the\n *   best match.\n *   @param {string} [context.prefix] - Expected text before the quote\n *   @param {string} [context.suffix] - Expected text after the quote\n *   @param {number} [context.hint] - Expected offset of match within text\n * @return {Match|null}\n */\nfunction match_quote_matchQuote(text, quote, context = {}) {\n  if (quote.length === 0) {\n    return null;\n  }\n\n  // Choose the maximum number of errors to allow for the initial search.\n  // This choice involves a tradeoff between:\n  //\n  //  - Recall (proportion of "good" matches found)\n  //  - Precision (proportion of matches found which are "good")\n  //  - Cost of the initial search and of processing the candidate matches [1]\n  //\n  // [1] Specifically, the expected-time complexity of the initial search is\n  //     `O((maxErrors / 32) * text.length)`. See `approx-string-match` docs.\n  const maxErrors = Math.min(256, quote.length / 2);\n\n  // Find closest matches for `quote` in `text` based on edit distance.\n  const matches = search(text, quote, maxErrors);\n\n  if (matches.length === 0) {\n    return null;\n  }\n\n  /**\n   * Compute a score between 0 and 1.0 for a match candidate.\n   *\n   * @param {StringMatch} match\n   */\n  const scoreMatch = match => {\n    const quoteWeight = 50; // Similarity of matched text to quote.\n    const prefixWeight = 20; // Similarity of text before matched text to `context.prefix`.\n    const suffixWeight = 20; // Similarity of text after matched text to `context.suffix`.\n    const posWeight = 2; // Proximity to expected location. Used as a tie-breaker.\n\n    const quoteScore = 1 - match.errors / quote.length;\n\n    const prefixScore = context.prefix\n      ? textMatchScore(\n          text.slice(Math.max(0, match.start - context.prefix.length), match.start),\n          context.prefix\n        )\n      : 1.0;\n    const suffixScore = context.suffix\n      ? textMatchScore(\n          text.slice(match.end, match.end + context.suffix.length),\n          context.suffix\n        )\n      : 1.0;\n\n    let posScore = 1.0;\n    if (typeof context.hint === \'number\') {\n      const offset = Math.abs(match.start - context.hint);\n      posScore = 1.0 - offset / text.length;\n    }\n\n    const rawScore =\n      quoteWeight * quoteScore +\n      prefixWeight * prefixScore +\n      suffixWeight * suffixScore +\n      posWeight * posScore;\n    const maxScore = quoteWeight + prefixWeight + suffixWeight + posWeight;\n    const normalizedScore = rawScore / maxScore;\n\n    return normalizedScore;\n  };\n\n  // Rank matches based on similarity of actual and expected surrounding text\n  // and actual/expected offset in the document text.\n  const scoredMatches = matches.map(m => ({\n    start: m.start,\n    end: m.end,\n    score: scoreMatch(m),\n  }));\n\n  // Choose match with highest score.\n  scoredMatches.sort((a, b) => b.score - a.score);\n  return scoredMatches[0];\n}\n\n;// CONCATENATED MODULE: ./src/vendor/hypothesis/anchoring/types.js\n/**\n * This module exports a set of classes for converting between DOM `Range`\n * objects and different types of selectors. It is mostly a thin wrapper around a\n * set of anchoring libraries. It serves two main purposes:\n *\n *  1. Providing a consistent interface across different types of anchors.\n *  2. Insulating the rest of the code from API changes in the underlying anchoring\n *     libraries.\n */\n\n\n\n\n\n/**\n * @typedef {import(\'../../types/api\').RangeSelector} RangeSelector\n * @typedef {import(\'../../types/api\').TextPositionSelector} TextPositionSelector\n * @typedef {import(\'../../types/api\').TextQuoteSelector} TextQuoteSelector\n */\n\n/**\n * Converts between `RangeSelector` selectors and `Range` objects.\n */\nclass RangeAnchor {\n  /**\n   * @param {Node} root - A root element from which to anchor.\n   * @param {Range} range -  A range describing the anchor.\n   */\n  constructor(root, range) {\n    this.root = root;\n    this.range = range;\n  }\n\n  /**\n   * @param {Node} root -  A root element from which to anchor.\n   * @param {Range} range -  A range describing the anchor.\n   */\n  static fromRange(root, range) {\n    return new RangeAnchor(root, range);\n  }\n\n  /**\n   * Create an anchor from a serialized `RangeSelector` selector.\n   *\n   * @param {Element} root -  A root element from which to anchor.\n   * @param {RangeSelector} selector\n   */\n  static fromSelector(root, selector) {\n    const startContainer = nodeFromXPath(selector.startContainer, root);\n    if (!startContainer) {\n      throw new Error(\'Failed to resolve startContainer XPath\');\n    }\n\n    const endContainer = nodeFromXPath(selector.endContainer, root);\n    if (!endContainer) {\n      throw new Error(\'Failed to resolve endContainer XPath\');\n    }\n\n    const startPos = TextPosition.fromCharOffset(\n      startContainer,\n      selector.startOffset\n    );\n    const endPos = TextPosition.fromCharOffset(\n      endContainer,\n      selector.endOffset\n    );\n\n    const range = new TextRange(startPos, endPos).toRange();\n    return new RangeAnchor(root, range);\n  }\n\n  toRange() {\n    return this.range;\n  }\n\n  /**\n   * @return {RangeSelector}\n   */\n  toSelector() {\n    // "Shrink" the range so that it tightly wraps its text. This ensures more\n    // predictable output for a given text selection.\n    const normalizedRange = TextRange.fromRange(this.range).toRange();\n\n    const textRange = TextRange.fromRange(normalizedRange);\n    const startContainer = xpathFromNode(textRange.start.element, this.root);\n    const endContainer = xpathFromNode(textRange.end.element, this.root);\n\n    return {\n      type: \'RangeSelector\',\n      startContainer,\n      startOffset: textRange.start.offset,\n      endContainer,\n      endOffset: textRange.end.offset,\n    };\n  }\n}\n\n/**\n * Converts between `TextPositionSelector` selectors and `Range` objects.\n */\nclass TextPositionAnchor {\n  /**\n   * @param {Element} root\n   * @param {number} start\n   * @param {number} end\n   */\n  constructor(root, start, end) {\n    this.root = root;\n    this.start = start;\n    this.end = end;\n  }\n\n  /**\n   * @param {Element} root\n   * @param {Range} range\n   */\n  static fromRange(root, range) {\n    const textRange = TextRange.fromRange(range).relativeTo(root);\n    return new TextPositionAnchor(\n      root,\n      textRange.start.offset,\n      textRange.end.offset\n    );\n  }\n  /**\n   * @param {Element} root\n   * @param {TextPositionSelector} selector\n   */\n  static fromSelector(root, selector) {\n    return new TextPositionAnchor(root, selector.start, selector.end);\n  }\n\n  /**\n   * @return {TextPositionSelector}\n   */\n  toSelector() {\n    return {\n      type: \'TextPositionSelector\',\n      start: this.start,\n      end: this.end,\n    };\n  }\n\n  toRange() {\n    return TextRange.fromOffsets(this.root, this.start, this.end).toRange();\n  }\n}\n\n/**\n * @typedef QuoteMatchOptions\n * @prop {number} [hint] - Expected position of match in text. See `matchQuote`.\n */\n\n/**\n * Converts between `TextQuoteSelector` selectors and `Range` objects.\n */\nclass types_TextQuoteAnchor {\n  /**\n   * @param {Element} root - A root element from which to anchor.\n   * @param {string} exact\n   * @param {Object} context\n   *   @param {string} [context.prefix]\n   *   @param {string} [context.suffix]\n   */\n  constructor(root, exact, context = {}) {\n    this.root = root;\n    this.exact = exact;\n    this.context = context;\n  }\n\n  /**\n   * Create a `TextQuoteAnchor` from a range.\n   *\n   * Will throw if `range` does not contain any text nodes.\n   *\n   * @param {Element} root\n   * @param {Range} range\n   */\n  static fromRange(root, range) {\n    const text = /** @type {string} */ (root.textContent);\n    const textRange = TextRange.fromRange(range).relativeTo(root);\n\n    const start = textRange.start.offset;\n    const end = textRange.end.offset;\n\n    // Number of characters around the quote to capture as context. We currently\n    // always use a fixed amount, but it would be better if this code was aware\n    // of logical boundaries in the document (paragraph, article etc.) to avoid\n    // capturing text unrelated to the quote.\n    //\n    // In regular prose the ideal content would often be the surrounding sentence.\n    // This is a natural unit of meaning which enables displaying quotes in\n    // context even when the document is not available. We could use `Intl.Segmenter`\n    // for this when available.\n    const contextLen = 32;\n\n    return new types_TextQuoteAnchor(root, text.slice(start, end), {\n      prefix: text.slice(Math.max(0, start - contextLen), start),\n      suffix: text.slice(end, Math.min(text.length, end + contextLen)),\n    });\n  }\n\n  /**\n   * @param {Element} root\n   * @param {TextQuoteSelector} selector\n   */\n  static fromSelector(root, selector) {\n    const { prefix, suffix } = selector;\n    return new types_TextQuoteAnchor(root, selector.exact, { prefix, suffix });\n  }\n\n  /**\n   * @return {TextQuoteSelector}\n   */\n  toSelector() {\n    return {\n      type: \'TextQuoteSelector\',\n      exact: this.exact,\n      prefix: this.context.prefix,\n      suffix: this.context.suffix,\n    };\n  }\n\n  /**\n   * @param {QuoteMatchOptions} [options]\n   */\n  toRange(options = {}) {\n    return this.toPositionAnchor(options).toRange();\n  }\n\n  /**\n   * @param {QuoteMatchOptions} [options]\n   */\n  toPositionAnchor(options = {}) {\n    const text = /** @type {string} */ (this.root.textContent);\n    const match = matchQuote(text, this.exact, {\n      ...this.context,\n      hint: options.hint,\n    });\n    if (!match) {\n      throw new Error(\'Quote not found\');\n    }\n    return new TextPositionAnchor(this.root, match.start, match.end);\n  }\n}\n\n;// CONCATENATED MODULE: ./src/utils.js\n//\n//  Copyright 2021 Readium Foundation. All rights reserved.\n//  Use of this source code is governed by the BSD-style license\n//  available in the top-level LICENSE file of the project.\n//\n\n// Catch JS errors to log them in the app.\n\n\n\nwindow.addEventListener(\n  "error",\n  function (event) {\n    webkit.messageHandlers.logError.postMessage({\n      message: event.message,\n      filename: event.filename,\n      line: event.lineno,\n    });\n  },\n  false\n);\n\n// Notify native code that the page has loaded.\nwindow.addEventListener(\n  "load",\n  function () {\n    // on page load\n    window.addEventListener("orientationchange", function () {\n      orientationChanged();\n      snapCurrentPosition();\n    });\n    orientationChanged();\n  },\n  false\n);\n\nvar last_known_scrollX_position = 0;\nvar last_known_scrollY_position = 0;\nvar ticking = false;\nvar maxScreenX = 0;\n\n// Position in range [0 - 1].\nfunction update(position) {\n  var positionString = position.toString();\n  webkit.messageHandlers.progressionChanged.postMessage(positionString);\n}\n\nwindow.addEventListener("scroll", function () {\n  last_known_scrollY_position =\n    window.scrollY / document.scrollingElement.scrollHeight;\n  // Using Math.abs because for RTL books, the value will be negative.\n  last_known_scrollX_position = Math.abs(\n    window.scrollX / document.scrollingElement.scrollWidth\n  );\n\n  // Window is hidden\n  if (\n    document.scrollingElement.scrollWidth === 0 ||\n    document.scrollingElement.scrollHeight === 0\n  ) {\n    return;\n  }\n\n  if (!ticking) {\n    window.requestAnimationFrame(function () {\n      update(\n        isScrollModeEnabled()\n          ? last_known_scrollY_position\n          : last_known_scrollX_position\n      );\n      ticking = false;\n    });\n  }\n  ticking = true;\n});\n\ndocument.addEventListener(\n  "selectionchange",\n  debounce(50, function () {\n    var info = {};\n    var selection = document.getSelection();\n    if (selection && selection.rangeCount > 0) {\n      var rect = selection.getRangeAt(0).getBoundingClientRect();\n      info["text"] = selection.toString().trim();\n      info["frame"] = {\n        x: rect.left,\n        y: rect.top,\n        width: rect.width,\n        height: rect.height,\n      };\n    }\n\n    webkit.messageHandlers.selectionChanged.postMessage(info);\n  })\n);\n\nfunction orientationChanged() {\n  maxScreenX =\n    window.orientation === 0 || window.orientation == 180\n      ? screen.width\n      : screen.height;\n}\n\nfunction isScrollModeEnabled() {\n  return (\n    document.documentElement.style\n      .getPropertyValue("--USER__scroll")\n      .toString()\n      .trim() === "readium-scroll-on"\n  );\n}\n\n// Scroll to the given TagId in document and snap.\nfunction scrollToId(id) {\n  var element = document.getElementById(id);\n  if (!element) {\n    return false;\n  }\n  element.scrollIntoView();\n\n  if (!isScrollModeEnabled()) {\n    var currentOffset = window.scrollX;\n    var pageWidth = window.innerWidth;\n    // Adds half a page to make sure we don\'t snap to the previous page.\n    document.scrollingElement.scrollLeft = snapOffset(\n      currentOffset + pageWidth / 2\n    );\n  }\n  return true;\n}\n\n// Position must be in the range [0 - 1], 0-100%.\nfunction scrollToPosition(position, dir) {\n  console.log("ScrollToPosition");\n  if (position < 0 || position > 1) {\n    console.log("InvalidPosition");\n    return;\n  }\n\n  if (isScrollModeEnabled()) {\n    let offset = document.scrollingElement.scrollHeight * position;\n    document.scrollingElement.scrollTop = offset;\n    // window.scrollTo(0, offset);\n  } else {\n    var documentWidth = document.scrollingElement.scrollWidth;\n    var factor = dir == "rtl" ? -1 : 1;\n    let offset = documentWidth * position * factor;\n    document.scrollingElement.scrollLeft = snapOffset(offset);\n  }\n}\n\n// Scrolls to the first occurrence of the given text snippet.\n//\n// The expected text argument is a Locator Text object, as defined here:\n// https://readium.org/architecture/models/locators/\nfunction scrollToText(text) {\n  let range = rangeFromLocator({ text });\n  if (!range) {\n    return false;\n  }\n  scrollToRange(range);\n  return true;\n}\n\nfunction scrollToRange(range) {\n  var rect = range.getBoundingClientRect();\n  if (isScrollModeEnabled()) {\n    document.scrollingElement.scrollTop =\n      rect.top + window.scrollY - window.innerHeight / 2;\n  } else {\n    document.scrollingElement.scrollLeft = rect.left + window.scrollX;\n    snapCurrentPosition();\n  }\n}\n\n// Returns false if the page is already at the left-most scroll offset.\nfunction scrollLeft(dir) {\n  var isRTL = dir == "rtl";\n  var documentWidth = document.scrollingElement.scrollWidth;\n  var pageWidth = window.innerWidth;\n  var offset = window.scrollX - pageWidth;\n  var minOffset = isRTL ? -(documentWidth - pageWidth) : 0;\n  return scrollToOffset(Math.max(offset, minOffset));\n}\n\n// Returns false if the page is already at the right-most scroll offset.\nfunction scrollRight(dir) {\n  var isRTL = dir == "rtl";\n  var documentWidth = document.scrollingElement.scrollWidth;\n  var pageWidth = window.innerWidth;\n  var offset = window.scrollX + pageWidth;\n  var maxOffset = isRTL ? 0 : documentWidth - pageWidth;\n  return scrollToOffset(Math.min(offset, maxOffset));\n}\n\n// Scrolls to the given left offset.\n// Returns false if the page scroll position is already close enough to the given offset.\nfunction scrollToOffset(offset) {\n  var currentOffset = window.scrollX;\n  var pageWidth = window.innerWidth;\n  document.scrollingElement.scrollLeft = offset;\n  // In some case the scrollX cannot reach the position respecting to innerWidth\n  var diff = Math.abs(currentOffset - offset) / pageWidth;\n  return diff > 0.01;\n}\n\n// Snap the offset to the screen width (page width).\nfunction snapOffset(offset) {\n  var value = offset + 1;\n\n  return value - (value % maxScreenX);\n}\n\nfunction snapCurrentPosition() {\n  if (isScrollModeEnabled()) {\n    return;\n  }\n  var currentOffset = window.scrollX;\n  var currentOffsetSnapped = snapOffset(currentOffset + 1);\n\n  document.scrollingElement.scrollLeft = currentOffsetSnapped;\n}\n\nfunction rangeFromLocator(locator) {\n  let text = locator.text;\n  if (!text || !text.highlight) {\n    return null;\n  }\n  try {\n    let anchor = new TextQuoteAnchor(document.body, text.highlight, {\n      prefix: text.before,\n      suffix: text.after,\n    });\n    return anchor.toRange();\n  } catch (e) {\n    logError(e);\n    return null;\n  }\n}\n\n/// User Settings.\n\n// For setting user setting.\nfunction setProperty(key, value) {\n  var root = document.documentElement;\n\n  root.style.setProperty(key, value);\n}\n\n// For removing user setting.\nfunction removeProperty(key) {\n  var root = document.documentElement;\n\n  root.style.removeProperty(key);\n}\n\n/// Toolkit\n\nfunction debounce(delay, func) {\n  var timeout;\n  return function () {\n    var self = this;\n    var args = arguments;\n    function callback() {\n      func.apply(self, args);\n      timeout = null;\n    }\n    clearTimeout(timeout);\n    timeout = setTimeout(callback, delay);\n  };\n}\n\nfunction log() {\n  var message = Array.prototype.slice.call(arguments).join(" ");\n  webkit.messageHandlers.log.postMessage(message);\n}\n\nfunction logErrorMessage(msg) {\n  logError(new Error(msg));\n}\n\nfunction logError(e) {\n  webkit.messageHandlers.logError.postMessage({\n    message: e.message,\n  });\n}\n\n;// CONCATENATED MODULE: ./src/index-fixed-wrapper.js\n//\n//  Copyright 2021 Readium Foundation. All rights reserved.\n//  Use of this source code is governed by the BSD-style license\n//  available in the top-level LICENSE file of the project.\n//\n\n// Script used for the wrapper HTML pages of fixed layouts resources.\n\n\n\nwindow.FixedPage = function (iframeId) {\n  // Fixed dimensions for the page, extracted from the viewport meta tag.\n  var _pageSize = null;\n  // Available viewport size to fill with the resource.\n  var _viewportSize = null;\n  // Margins that should not overlap the content.\n  var _safeAreaInsets = null;\n\n  // iFrame containing the page.\n  var _iframe = document.getElementById(iframeId);\n  _iframe.addEventListener("load", loadPageSize);\n\n  // Viewport element containing the iFrame.\n  var _viewport = _iframe.closest(".viewport");\n\n  // Parses the page size from the viewport meta tag of the loaded resource.\n  function loadPageSize() {\n    var viewport = _iframe.contentWindow.document.querySelector(\n      "meta[name=viewport]"\n    );\n    if (!viewport) {\n      return;\n    }\n    var regex = /(\\w+) *= *([^\\s,]+)/g;\n    var properties = {};\n    var match;\n    while ((match = regex.exec(viewport.content))) {\n      properties[match[1]] = match[2];\n    }\n    var width = Number.parseFloat(properties.width);\n    var height = Number.parseFloat(properties.height);\n    if (width && height) {\n      _pageSize = { width: width, height: height };\n      layoutPage();\n    }\n  }\n\n  // Layouts the page iframe to center its content and scale it to fill the available viewport.\n  function layoutPage() {\n    if (!_pageSize || !_viewportSize || !_safeAreaInsets) {\n      return;\n    }\n\n    _iframe.style.width = _pageSize.width + "px";\n    _iframe.style.height = _pageSize.height + "px";\n    _iframe.style.marginTop =\n      _safeAreaInsets.top - _safeAreaInsets.bottom + "px";\n    _iframe.style.marginLeft =\n      _safeAreaInsets.left - _safeAreaInsets.right + "px";\n\n    // Calculates the zoom scale required to fit the content to the viewport.\n    var widthRatio = _viewportSize.width / _pageSize.width;\n    var heightRatio = _viewportSize.height / _pageSize.height;\n    var scale = Math.min(widthRatio, heightRatio);\n\n    // Sets the viewport of the wrapper page (this page) to scale the iframe.\n    var viewport = document.querySelector("meta[name=viewport]");\n    viewport.content = "initial-scale=" + scale + ", minimum-scale=" + scale;\n  }\n\n  return {\n    // Returns whether the page is currently loading its contents.\n    isLoading: false,\n\n    // Href of the resource currently loaded in the page.\n    href: null,\n\n    // Loads the given link ({href, url}) in the page.\n    load: function (link, completion) {\n      if (!link.href || !link.url) {\n        if (completion) {\n          completion();\n        }\n        return;\n      }\n\n      var page = this;\n      page.href = link.href;\n      page.isLoading = true;\n\n      function loaded() {\n        _iframe.removeEventListener("load", loaded);\n\n        // Waiting for the next animation frame seems to do the trick to make sure the page is fully rendered.\n        _iframe.contentWindow.requestAnimationFrame(function () {\n          page.isLoading = false;\n          if (completion) {\n            completion();\n          }\n        });\n      }\n\n      _iframe.addEventListener("load", loaded);\n      _iframe.src = link.url;\n    },\n\n    // Resets the page and empty its contents.\n    reset: function () {\n      if (!this.href) {\n        return;\n      }\n      this.href = null;\n      _pageSize = null;\n      _iframe.src = "about:blank";\n    },\n\n    // Evaluates a script in the context of the page.\n    eval: function (script) {\n      if (!this.href || this.isLoading) {\n        return;\n      }\n      log("EVAL: " + script);\n      return _iframe.contentWindow.eval(script);\n    },\n\n    // Updates the available viewport to display the resource.\n    setViewport: function (viewportSize, safeAreaInsets) {\n      _viewportSize = viewportSize;\n      _safeAreaInsets = safeAreaInsets;\n      layoutPage();\n    },\n\n    // Shows the page\'s viewport.\n    show: function () {\n      _viewport.style.display = "block";\n    },\n\n    // Hides the page\'s viewport.\n    hide: function () {\n      _viewport.style.display = "none";\n    },\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///388\n')}},__webpack_module_cache__={};function __webpack_require__(n){var t=__webpack_module_cache__[n];if(void 0!==t)return t.exports;var g=__webpack_module_cache__[n]={exports:{}};return __webpack_modules__[n](g,g.exports,__webpack_require__),g.exports}var __webpack_exports__=__webpack_require__(388)})();